{
  "openapi": "3.1.0",
  "info": {
    "title": "AnyCrawl API",
    "version": "0.0.1",
    "description": "AnyCrawl ðŸš€: A Node.js/TypeScript crawler that turns websites into LLM-ready data and extracts structured SERP results from Google/Bing/Baidu/etc. Native multi-threading for bulk processing.",
    "contact": {
      "name": "AnyCrawl Support",
      "url": "https://github.com/anycrawl/anycrawl",
      "email": "support@anycrawl.dev"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "https://anycrawl.dev/terms"
  },
  "servers": [
    {
      "url": "https://api.anycrawl.dev",
      "description": "Production server"
    },
    {
      "url": "http://localhost:8080",
      "description": "Development server (localhost)"
    }
  ],
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Crawl",
      "description": "Crawl a site and aggregate per-page scraping outputs"
    },
    {
      "name": "Scraping",
      "description": "Turn a URL into structured data and LLM-ready data"
    },
    {
      "name": "Search",
      "description": "SERP, search engine results page"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health status",
        "description": "Get server health status",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Server health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/crawl": {
      "post": {
        "summary": "Create Crawl task",
        "description": "Start a site crawl job. The job runs asynchronously and returns a job_id for polling.",
        "tags": [
          "Crawl"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "engine": {
                    "type": "string",
                    "enum": [
                      "playwright",
                      "cheerio",
                      "puppeteer"
                    ],
                    "description": "The scraping engine used for each crawled page",
                    "example": "cheerio"
                  },
                  "proxy": {
                    "type": "string",
                    "format": "uri"
                  },
                  "formats": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "markdown",
                        "html",
                        "text",
                        "screenshot",
                        "screenshot@fullPage",
                        "rawHtml",
                        "json"
                      ]
                    },
                    "default": [
                      "markdown"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "minimum": 1000,
                    "maximum": 600000,
                    "default": 60000
                  },
                  "wait_for": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 60000
                  },
                  "retry": {
                    "type": "boolean",
                    "default": false
                  },
                  "include_tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude_tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "json_options": {
                    "type": "object",
                    "properties": {
                      "schema": {
                        "description": "JSON Schema specification object (docs-only placeholder to avoid circular refs)"
                      },
                      "user_prompt": {
                        "type": "string"
                      },
                      "schema_name": {
                        "type": "string"
                      },
                      "schema_description": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "scrape_options": {
                    "type": "object",
                    "properties": {
                      "proxy": {
                        "type": "string",
                        "format": "uri"
                      },
                      "formats": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "markdown",
                            "html",
                            "text",
                            "screenshot",
                            "screenshot@fullPage",
                            "rawHtml",
                            "json"
                          ]
                        },
                        "default": [
                          "markdown"
                        ]
                      },
                      "timeout": {
                        "type": "number",
                        "minimum": 1000,
                        "maximum": 600000,
                        "default": 60000
                      },
                      "wait_for": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 60000
                      },
                      "include_tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "exclude_tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "json_options": {
                        "type": "object",
                        "properties": {
                          "schema": {
                            "description": "JSON Schema specification object (docs-only placeholder to avoid circular refs)"
                          },
                          "user_prompt": {
                            "type": "string"
                          },
                          "schema_name": {
                            "type": "string"
                          },
                          "schema_description": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  },
                  "exclude_paths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "include_paths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "max_depth": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 10
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "all",
                      "same-domain",
                      "same-hostname",
                      "same-origin"
                    ],
                    "default": "same-domain"
                  },
                  "limit": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 50000,
                    "default": 100
                  }
                },
                "required": [
                  "url",
                  "engine"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Crawl job created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": true,
                      "description": "Indicates the crawl job was accepted and queued"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Crawl job identifier",
                          "example": "7a2e165d-8f81-4be6-9ef7-23222330a396"
                        },
                        "status": {
                          "type": "string",
                          "const": "created",
                          "description": "Initial job status",
                          "example": "created"
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable confirmation message",
                          "example": "Crawl job has been queued for processing"
                        }
                      },
                      "required": [
                        "job_id",
                        "status",
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ],
                  "description": "Crawl job creation response (HTTP 200)"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The field that caused the error",
                                "example": "engine"
                              },
                              "message": {
                                "type": "string",
                                "description": "Error message for the field",
                                "example": "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                              },
                              "code": {
                                "type": "string",
                                "description": "Error code",
                                "example": "invalid_enum_value"
                              }
                            },
                            "required": [
                              "field",
                              "message",
                              "code"
                            ]
                          },
                          "description": "Array of validation issues"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of validation error messages",
                          "example": [
                            "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                          ]
                        }
                      },
                      "required": [
                        "issues",
                        "messages"
                      ],
                      "description": "Validation error details"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "details"
                  ],
                  "description": "Standard error response format for validation errors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to authentication issues"
                    },
                    "error": {
                      "type": "string",
                      "description": "Authentication error message",
                      "example": "Invalid API key",
                      "examples": [
                        "Invalid API key",
                        "No authorization header provided"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ],
                  "description": "Unauthorized response format for authentication errors"
                }
              }
            }
          },
          "402": {
            "description": "Payment required - subscription or credits needed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to insufficient credits"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Insufficient credits"
                    },
                    "current_credits": {
                      "type": "number",
                      "description": "Current credit balance of the user",
                      "example": -2
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "current_credits"
                  ],
                  "description": "Payment required response format with credit information"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to server error"
                    },
                    "error": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Internal server error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message describing what went wrong",
                      "example": "Job 0ae56ed9-d9a9-4998-aea9-2ff5b51b2e4e timed out after 30000 seconds"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "message"
                  ],
                  "description": "Internal server error response format"
                }
              }
            }
          }
        }
      }
    },
    "/v1/crawl/{jobId}/status": {
      "get": {
        "summary": "Check Crawl status",
        "description": "Get the current status of a crawl job",
        "tags": [
          "Crawl"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The crawl job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Status message",
                      "example": "Job status retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "completed",
                            "failed",
                            "cancelled"
                          ],
                          "example": "pending"
                        },
                        "start_time": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-05-25T07:56:44.162Z"
                        },
                        "expires_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-05-26T07:56:44.162Z"
                        },
                        "credits_used": {
                          "type": "number",
                          "example": 0
                        },
                        "total": {
                          "type": "number",
                          "example": 120
                        },
                        "completed": {
                          "type": "number",
                          "example": 30
                        },
                        "failed": {
                          "type": "number",
                          "example": 2
                        }
                      },
                      "required": [
                        "job_id",
                        "status",
                        "start_time",
                        "expires_at",
                        "credits_used",
                        "total",
                        "completed",
                        "failed"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "data"
                  ],
                  "description": "Crawl job status response (HTTP 200)"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid job id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The field that caused the error",
                                "example": "engine"
                              },
                              "message": {
                                "type": "string",
                                "description": "Error message for the field",
                                "example": "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                              },
                              "code": {
                                "type": "string",
                                "description": "Error code",
                                "example": "invalid_enum_value"
                              }
                            },
                            "required": [
                              "field",
                              "message",
                              "code"
                            ]
                          },
                          "description": "Array of validation issues"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of validation error messages",
                          "example": [
                            "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                          ]
                        }
                      },
                      "required": [
                        "issues",
                        "messages"
                      ],
                      "description": "Validation error details"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "details"
                  ],
                  "description": "Standard error response format for validation errors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to authentication issues"
                    },
                    "error": {
                      "type": "string",
                      "description": "Authentication error message",
                      "example": "Invalid API key",
                      "examples": [
                        "Invalid API key",
                        "No authorization header provided"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ],
                  "description": "Unauthorized response format for authentication errors"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to server error"
                    },
                    "error": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Internal server error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message describing what went wrong",
                      "example": "Job 0ae56ed9-d9a9-4998-aea9-2ff5b51b2e4e timed out after 30000 seconds"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "message"
                  ],
                  "description": "Internal server error response format"
                }
              }
            }
          }
        }
      }
    },
    "/v1/crawl/{jobId}": {
      "get": {
        "summary": "Get Crawl results",
        "description": "Get crawl results (paginated via skip query param).",
        "tags": [
          "Crawl"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The crawl job ID"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Number of results to skip (page offset)"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl results page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": true
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "completed",
                        "failed",
                        "cancelled"
                      ],
                      "example": "pending"
                    },
                    "total": {
                      "type": "number",
                      "example": 120
                    },
                    "completed": {
                      "type": "number",
                      "example": 30
                    },
                    "creditsUsed": {
                      "type": "number",
                      "example": 12
                    },
                    "next": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "uri",
                      "description": "Next page URL if more results are available",
                      "example": "https://api.anycrawl.dev/v1/crawl/7a2e165d-8f81-4be6-9ef7-23222330a396?skip=100"
                    },
                    "data": {
                      "type": "array",
                      "items": {},
                      "description": "Array of per-page scraping results produced by the crawl"
                    }
                  },
                  "required": [
                    "success",
                    "status",
                    "total",
                    "completed",
                    "creditsUsed",
                    "data"
                  ],
                  "description": "Crawl job results (paginated) response (HTTP 200)"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid job id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The field that caused the error",
                                "example": "engine"
                              },
                              "message": {
                                "type": "string",
                                "description": "Error message for the field",
                                "example": "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                              },
                              "code": {
                                "type": "string",
                                "description": "Error code",
                                "example": "invalid_enum_value"
                              }
                            },
                            "required": [
                              "field",
                              "message",
                              "code"
                            ]
                          },
                          "description": "Array of validation issues"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of validation error messages",
                          "example": [
                            "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                          ]
                        }
                      },
                      "required": [
                        "issues",
                        "messages"
                      ],
                      "description": "Validation error details"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "details"
                  ],
                  "description": "Standard error response format for validation errors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to authentication issues"
                    },
                    "error": {
                      "type": "string",
                      "description": "Authentication error message",
                      "example": "Invalid API key",
                      "examples": [
                        "Invalid API key",
                        "No authorization header provided"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ],
                  "description": "Unauthorized response format for authentication errors"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to server error"
                    },
                    "error": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Internal server error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message describing what went wrong",
                      "example": "Job 0ae56ed9-d9a9-4998-aea9-2ff5b51b2e4e timed out after 30000 seconds"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "message"
                  ],
                  "description": "Internal server error response format"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Cancel crawl",
        "description": "Cancel a pending crawl job",
        "tags": [
          "Crawl"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The crawl job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Job cancelled successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "job_id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "status": {
                          "type": "string",
                          "const": "cancelled"
                        }
                      },
                      "required": [
                        "job_id",
                        "status"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "data"
                  ],
                  "description": "Crawl job cancellation response (HTTP 200)"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid job id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The field that caused the error",
                                "example": "engine"
                              },
                              "message": {
                                "type": "string",
                                "description": "Error message for the field",
                                "example": "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                              },
                              "code": {
                                "type": "string",
                                "description": "Error code",
                                "example": "invalid_enum_value"
                              }
                            },
                            "required": [
                              "field",
                              "message",
                              "code"
                            ]
                          },
                          "description": "Array of validation issues"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of validation error messages",
                          "example": [
                            "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                          ]
                        }
                      },
                      "required": [
                        "issues",
                        "messages"
                      ],
                      "description": "Validation error details"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "details"
                  ],
                  "description": "Standard error response format for validation errors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to authentication issues"
                    },
                    "error": {
                      "type": "string",
                      "description": "Authentication error message",
                      "example": "Invalid API key",
                      "examples": [
                        "Invalid API key",
                        "No authorization header provided"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ],
                  "description": "Unauthorized response format for authentication errors"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to server error"
                    },
                    "error": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Internal server error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message describing what went wrong",
                      "example": "Job 0ae56ed9-d9a9-4998-aea9-2ff5b51b2e4e timed out after 30000 seconds"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "message"
                  ],
                  "description": "Internal server error response format"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scrape": {
      "post": {
        "summary": "Scrape",
        "description": "AnyCrawl scrapes a URL, turns it into structured data and LLM-ready data. It supports multiple engines, including Cheerio, Playwright, Puppeteer, and more. It also supports multiple output formats, including HTML, Markdown, JSON, and more.",
        "tags": [
          "Scraping"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "engine": {
                    "type": "string",
                    "enum": [
                      "playwright",
                      "cheerio",
                      "puppeteer"
                    ],
                    "description": "The engine to use",
                    "example": "cheerio"
                  },
                  "proxy": {
                    "type": "string",
                    "format": "uri"
                  },
                  "formats": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "markdown",
                        "html",
                        "text",
                        "screenshot",
                        "screenshot@fullPage",
                        "rawHtml",
                        "json"
                      ]
                    },
                    "default": [
                      "markdown"
                    ]
                  },
                  "timeout": {
                    "type": "number",
                    "minimum": 1000,
                    "maximum": 600000,
                    "default": 60000
                  },
                  "retry": {
                    "type": "boolean",
                    "default": false
                  },
                  "wait_for": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 60000
                  },
                  "include_tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "exclude_tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "json_options": {
                    "type": "object",
                    "properties": {
                      "schema": {
                        "description": "JSON Schema specification object (docs-only placeholder to avoid circular refs)"
                      },
                      "user_prompt": {
                        "type": "string"
                      },
                      "schema_name": {
                        "type": "string"
                      },
                      "schema_description": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": [
                  "url",
                  "engine",
                  "json_options"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scraping successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": true,
                      "description": "Indicates the scraping request was successful"
                    },
                    "data": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "uri",
                              "description": "The URL that was scraped",
                              "example": "https://httpstat.us/200"
                            },
                            "status": {
                              "type": "string",
                              "const": "completed",
                              "description": "The status of the scraping job when successful",
                              "example": "completed"
                            },
                            "jobId": {
                              "type": "string",
                              "format": "uuid",
                              "description": "Unique identifier for the scraping job",
                              "example": "7a2e165d-8f81-4be6-9ef7-23222330a396"
                            },
                            "title": {
                              "type": "string",
                              "description": "The title of the scraped page",
                              "example": ""
                            },
                            "html": {
                              "type": "string",
                              "description": "The HTML content of the scraped page",
                              "example": "200 OK"
                            },
                            "markdown": {
                              "type": "string",
                              "description": "The markdown content of the scraped page",
                              "example": "200 OK"
                            },
                            "metadata": {
                              "type": "array",
                              "items": {},
                              "description": "Additional metadata extracted from the page",
                              "example": []
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp when the scraping was completed",
                              "example": "2025-05-25T07:56:44.162Z"
                            }
                          },
                          "required": [
                            "url",
                            "status",
                            "jobId",
                            "title",
                            "html",
                            "markdown",
                            "metadata",
                            "timestamp"
                          ],
                          "description": "Successful scraping result data"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "uri",
                              "description": "The URL that was attempted to be scraped",
                              "example": "https://httpstat.us/403"
                            },
                            "status": {
                              "type": "string",
                              "const": "failed",
                              "description": "The status of the scraping job when failed",
                              "example": "failed"
                            },
                            "error": {
                              "type": "string",
                              "description": "Error message describing why the scraping failed",
                              "example": "Request blocked - received 403 status code."
                            }
                          },
                          "required": [
                            "url",
                            "status",
                            "error"
                          ],
                          "description": "Failed scraping result data"
                        }
                      ],
                      "description": "Scraping result data - either successful with full content or failed with error message"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ],
                  "description": "Scraping response format (HTTP 200) - can contain either successful or failed scraping results"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The field that caused the error",
                                "example": "engine"
                              },
                              "message": {
                                "type": "string",
                                "description": "Error message for the field",
                                "example": "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                              },
                              "code": {
                                "type": "string",
                                "description": "Error code",
                                "example": "invalid_enum_value"
                              }
                            },
                            "required": [
                              "field",
                              "message",
                              "code"
                            ]
                          },
                          "description": "Array of validation issues"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of validation error messages",
                          "example": [
                            "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                          ]
                        }
                      },
                      "required": [
                        "issues",
                        "messages"
                      ],
                      "description": "Validation error details"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "details"
                  ],
                  "description": "Standard error response format for validation errors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to authentication issues"
                    },
                    "error": {
                      "type": "string",
                      "description": "Authentication error message",
                      "example": "Invalid API key",
                      "examples": [
                        "Invalid API key",
                        "No authorization header provided"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ],
                  "description": "Unauthorized response format for authentication errors"
                }
              }
            }
          },
          "402": {
            "description": "Payment required - subscription or credits needed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to insufficient credits"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Insufficient credits"
                    },
                    "current_credits": {
                      "type": "number",
                      "description": "Current credit balance of the user",
                      "example": -2
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "current_credits"
                  ],
                  "description": "Payment required response format with credit information"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to server error"
                    },
                    "error": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Internal server error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message describing what went wrong",
                      "example": "Job 0ae56ed9-d9a9-4998-aea9-2ff5b51b2e4e timed out after 30000 seconds"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "message"
                  ],
                  "description": "Internal server error response format"
                }
              }
            }
          }
        }
      }
    },
    "/v1/search": {
      "post": {
        "summary": "SERP",
        "description": "Search the web using specified search engine",
        "tags": [
          "Search"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "engine": {
                    "type": "string",
                    "enum": [
                      "google"
                    ]
                  },
                  "query": {
                    "type": "string"
                  },
                  "limit": {
                    "type": "number"
                  },
                  "offset": {
                    "type": "number"
                  },
                  "pages": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 20
                  },
                  "lang": {},
                  "country": {},
                  "safeSearch": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "minimum": 0,
                    "maximum": 2
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": true,
                      "description": "Indicates the search request was successful"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The title of the search result",
                                "example": "AlsoAsked: People Also Ask keyword research tool"
                              },
                              "url": {
                                "type": "string",
                                "format": "uri",
                                "description": "The URL of the search result",
                                "example": "https://alsoasked.com/"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description/snippet of the search result",
                                "example": "Find the questions people also ask. Enter a question, brand or search query. e.g. 'keyword research'."
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of the search result",
                                "example": "Google Search Result"
                              }
                            },
                            "required": [
                              "title",
                              "url",
                              "description",
                              "source"
                            ],
                            "description": "Search result with URL and description"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string",
                                "description": "The title of the search suggestion",
                                "example": "Keyword tool"
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of the search suggestion",
                                "example": "Google Suggestions"
                              }
                            },
                            "required": [
                              "title",
                              "source"
                            ],
                            "description": "Search suggestion without URL"
                          }
                        ]
                      },
                      "description": "Array of search results and suggestions - can be empty if no results found",
                      "example": [
                        {
                          "title": "The Investment Case for Digital Infrastructure",
                          "url": "https://www.patrizia.ag/fileadmin/user_upload/The_Investment_Case_for_Digital_Infrastructure.pdf",
                          "description": "It took just five days for ChatGPT to reach one million users and just two months to reach 100 million users, the fastest of any social media platform or app in ...48 pages",
                          "source": "Google Search Result"
                        }
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ],
                  "description": "Successful search response format containing an array of search results and suggestions (may be empty)"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "issues": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The field that caused the error",
                                "example": "engine"
                              },
                              "message": {
                                "type": "string",
                                "description": "Error message for the field",
                                "example": "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                              },
                              "code": {
                                "type": "string",
                                "description": "Error code",
                                "example": "invalid_enum_value"
                              }
                            },
                            "required": [
                              "field",
                              "message",
                              "code"
                            ]
                          },
                          "description": "Array of validation issues"
                        },
                        "messages": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Array of validation error messages",
                          "example": [
                            "Invalid enum value. Expected 'playwright' | 'cheerio' | 'puppeteer', received 'cheeri1o'"
                          ]
                        }
                      },
                      "required": [
                        "issues",
                        "messages"
                      ],
                      "description": "Validation error details"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "details"
                  ],
                  "description": "Standard error response format for validation errors"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to authentication issues"
                    },
                    "error": {
                      "type": "string",
                      "description": "Authentication error message",
                      "example": "Invalid API key",
                      "examples": [
                        "Invalid API key",
                        "No authorization header provided"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ],
                  "description": "Unauthorized response format for authentication errors"
                }
              }
            }
          },
          "402": {
            "description": "Payment required - subscription or credits needed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to insufficient credits"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Insufficient credits"
                    },
                    "current_credits": {
                      "type": "number",
                      "description": "Current credit balance of the user",
                      "example": -2
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "current_credits"
                  ],
                  "description": "Payment required response format with credit information"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "const": false,
                      "description": "Indicates the request failed due to server error"
                    },
                    "error": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Internal server error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message describing what went wrong",
                      "example": "Job 0ae56ed9-d9a9-4998-aea9-2ff5b51b2e4e timed out after 30000 seconds"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "message"
                  ],
                  "description": "Internal server error response format"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for API authentication"
      }
    }
  }
}